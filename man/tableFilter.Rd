% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/tableFilter.R
\name{tableFilter}
\alias{tableFilter}
\title{tableFilter Generate a HTML table widget with advanced filtering, sorting and colouring.}
\usage{
tableFilter(df, tableProps, showRowNames = FALSE,
  rowNamesColumn = "Rownames", extensions = c(), bgColScales = list(),
  fgColScales = list())
}
\arguments{
\item{df}{Data frame or matrix to be displayed as html table}

\item{tableProps}{A list object describing appearence and function of the table}

\item{showRowNames}{Add the R row names as first column to the table}

\item{rowNamesColumn}{column title for the row names column}

\item{extensions}{Vector of table filter exentsions to load}

\item{bgColScales}{List of background colour scales to apply to the columns}

\item{fgColScales}{List of text colour scales to apply to the columns}
}
\description{
R interface to Max Guglielmi's \href{http://tablefilter.free.fr/ }{HTML Table
Filter Generator} JavaScript library. Provides advanced filtering and
sorting. Columns can be coloured based on displayed values using D3 colour
scales.
}
\section{Configuration}{
 The tableFilter widget can be highly customized. See
  the website of the JavaScript library  \href{http://tablefilter.free.fr/
  }{HTML Table Filter Generator} for details. Configuration is passed as a
  list of key value pairs to the JavaScript engine. A shiny app demonstrating
  many useful features in one table can be found in the inst/examples/feature
  directory of this package.
}

\section{Extensions}{
 Some of the TableFilter functions are beeing provided as
  extensions, in particular \itemize{ \item ColsVisibility: Visibility of
  columns can be adjusted by configuration or interactively \item
  ColumnsResizer: Interactive resizing of columnd width \item
  FiltersRowVisibility: Interactively show or hide the filter row. }
To activate these extensions simply define them as a character vector in the
extensions parameter, e.g. \code{extensions = c("ColsVisibility",
"ColumnsResizer", "FiltersRowVisibility")}. This takes care of enabling and
basic configuration of the extensions. For further customization use the
tableProps object.
}

\section{Colouring}{
 Table columns can be colored based on their cells value
  using D3.js colour scales. Table background and foreground (text) can be
  coloured independently. Colour definitions are passed to the JavaScript
  engine as D3 scale functions. This allows for a variety of scales for
  different purposes. See
  \href{https://github.com/mbostock/d3/wiki/Scales}{D3 scale documentation}
  and examples below for details. As a shortcut a linear scale over the full
  value range of a column can be defined as \code{col_n =
  "auto:startcolour:endcolour"} (n is the column number, starting with 0).
  For better mapping from numeric values to perceived intensity a HCL colour
  interpolation is used. An example shiny app showing various colour scales
  can be found in the inst/examples/colour/ directory of this package.
}
\examples{
# ------------------------------------------------------------------------------
# colour definition: apply a white to blue linear scale to the background of the
# first column ("col_0") over a range of values from 0 to 200
# ------------------------------------------------------------------------------
bgColScales <- list(
col_0 = JS('function colorScale(i){
        var color = d3.scale.linear()
        .domain([0, 200])
        .range(["white", "blue"]);
        return color(i);
     }'));
# ----------------------------------------------------------------------------
# simplified colour definition: first column, linear scale from white to green
# ----------------------------------------------------------------------------
bgColScales <- list(
 col_0 = "auto:white:green"
)
# ------------------------------------------------------
# Minimal shiny app demonstrating the tableFilter widget
# ------------------------------------------------------
library(shiny)
library(htmlwidgets)
library(tableFilter)

data(mtcars);

shinyServer(function(input, output, session) {
  output$mtcars <- renderTableFilter({
    
    # define table properties. See http://tablefilter.free.fr/doc.php
    # for a complete reference
    tableProps <- list(
      alternate_rows = TRUE,
      btn_reset = TRUE,
      sort = TRUE,
      sort_config = list(
        # alphabetic sorting for the row names column, numeric for all other columns
        sort_types = c("String", rep("Number", ncol(mtcars)))
      )
    );
    tableFilter(mtcars, tableProps, showRowNames = TRUE, rowNamesColumn = "Model");
  })
})
}
\seealso{
\code{\link[DT]{datatable}}.
}

